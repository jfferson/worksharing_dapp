/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Options for the Java VM.
 * Not the same as vm arguments.
 */
export interface JavaOptions {
  /**
   * Additional items to add to the class path. This does allow for wildcard imports
   * using glob patterns. If a path is unreadable, an error will be thrown.
   * This behaviour can be changed by setting `ignore_unreadable_class_path_entries` to true.
   */
  classpath?: Array<string>
  /** Whether to ignore unreadable class path entries */
  ignoreUnreadableClassPathEntries?: boolean
}
/**
 * Get the path to the jvm.(dll|so|dylib) file.
 * Throws an error if the library could not be found.
 */
export function getJavaLibPath(): string
/**
 * The main java class.
 * This should only be created once per process.
 * Any other attempts to create a new jvm instance will fail.
 */
export class Java {
  /**
   * Create a new JVM instance.
   * @param libPath The path to jvm.(dll|so|dylib)
   * @param version The JVM version to use.
   * @param opts The JVM options to use.
   */
  constructor(libPath: string | undefined | null, version: string | undefined | null, opts: Array<string> | undefined | null, javaOptions: JavaOptions | undefined | null, javaLibPath: string, nativeLibPath: string)
  /**
   * Import a java class
   * Will import the class and parse all of its methods and fields.
   * The imported class will be cached for future use.
   */
  importClass(className: string): object
  /**
   * Import a java class (async)
   * Will return a promise that resolves to the class instance.
   * @see importClass
   */
  importClassAsync(className: string): Promise<object>
  /**
   * Get the wanted JVM version.
   * This may not match the actual JVM version.
   */
  get wantedVersion(): string
  /**
   * Get the actual JVM version.
   * This may not match the wanted JVM version.
   */
  get version(): string
  /** Get the loaded jars. */
  get loadedJars(): Array<string>
  /** Append a single or multiple jars to the classpath. */
  appendClasspath(classpath: string | string[]): void
  /** Set the stdout/stderr callbacks */
  setStdoutCallbacks(stdoutCallback?: ((err: Error | null, data?: string) => void) | undefined | null, stderrCallback?: ((err: Error | null, data?: string) => void) | undefined | null): StdoutRedirect
  createInterfaceProxy(classname: string, methods: Record<string, (err: null | Error, callback: (err: Error | null, data?: any | null) => void, ...args: any[]) => void>): JavaInterfaceProxy
  /** Check if `this` is instance of `other` */
  isInstanceOf(thisObj: object, other: string | object): boolean
  get classLoader(): object
  set classLoader(classLoader: object)
}
export class JavaInterfaceProxy {
  get proxy(): object
  reset(): void
}
export class StdoutRedirect {
  on(event: string, callback?: ((...args: any[]) => any) | null): void
  reset(): void
}
