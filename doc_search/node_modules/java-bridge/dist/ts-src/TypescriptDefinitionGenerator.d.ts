export interface MethodDeclaration {
    returnType: string;
    parameters: string[];
    isStatic: boolean;
}
/**
 * A java class declaration converted to typescript
 */
export interface ModuleDeclaration {
    /**
     * The fully-qualified class name
     */
    name: string;
    /**
     * The generated typescript code
     */
    contents: string;
}
/**
 * A TypescriptDefinitionGenerator progress callback method
 */
export type ProgressCallback = (classname: string) => void;
/**
 * A class to generate typescript definitions for java classes.
 * Converts the given class and all of its dependencies to typescript.
 *
 * ## Example
 * ```ts
 * import { TypescriptDefinitionGenerator } from 'java-bridge';
 *
 * const generator = new TypescriptDefinitionGenerator('java.lang.String');
 * // Generate the typescript definitions
 * const definitions = await generator.generate();
 *
 * // Save the definitions to a directory
 * await TypescriptDefinitionGenerator.save(definitions, './project');
 * ```
 */
export default class TypescriptDefinitionGenerator {
    private readonly classname;
    private readonly progressCallback;
    private readonly resolvedImports;
    private usesBasicOrJavaType;
    private readonly additionalImports;
    private readonly importsToResolve;
    /**
     * Create a new `TypescriptDefinitionGenerator` instance
     *
     * @param classname the fully-qualified name of the class to generate a typescript definition for
     * @param progressCallback a callback method to be called every time a java class is
     *                         converted to typescript
     * @param resolvedImports a list of imports that have already been resolved.
     *                        This is used to prevent converting a class multiple times
     */
    constructor(classname: string, progressCallback?: ProgressCallback | null, resolvedImports?: string[]);
    private static convertMethods;
    private convertFields;
    private isAbstractOrInterface;
    private createPrivateConstructor;
    private convertConstructors;
    private primitiveToClassType;
    private isPrimitive;
    private javaTypeToTypescriptType;
    private convertParameter;
    private convertParameters;
    private static createMethodComment;
    private createMethod;
    private convertMethod;
    private getAdditionalImports;
    private getImports;
    private getExportStatement;
    private getText;
    /**
     * Generates the typescript definition for the given class.
     *
     * @returns the generated typescript definitions
     */
    generate(): Promise<ModuleDeclaration[]>;
    /**
     * Save the converted classes to the given directory.
     *
     * @param declarations the declarations to save
     * @param sourceDir the directory to save the files to
     */
    static save(declarations: ModuleDeclaration[], sourceDir: string): Promise<void>;
}
